package com.neperiagroup.happysalus;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.TextView;

import com.htsmart.wristband.WristbandApplication;
import com.htsmart.wristband.bean.SleepTotalData;
import com.htsmart.wristband.bean.SyncRawData;
import com.htsmart.wristband.bean.TodayTotalData;
import com.htsmart.wristband.bean.WristbandConfig;
import com.htsmart.wristband.bean.WristbandVersion;
import com.htsmart.wristband.performer.IDevicePerformer;
import com.htsmart.wristband.performer.SimplePerformerListener;
import com.neperiagroup.happysalus.bean.DataDevice;
import com.neperiagroup.happysalus.bean.GenericDayData;
import com.neperiagroup.happysalus.bean.OxygenDayData;
import com.neperiagroup.happysalus.bean.WeekData;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

public class SleepStatsActivity extends AppCompatActivity{
    private static final String TAG = SleepStatsActivity.class.getName();
    private static final String DEVICE_DATA_KEY = TAG + ".device_data";
    private static final String DEVICE_NAME_KEY = TAG + ".device_name";

    private Toolbar toolbar;
    private TextView toolbarTitle;

    private String deviceName;
    private DataDevice deviceData;

    private IDevicePerformer mDevicePerformer = WristbandApplication.getDevicePerformer();



    @Override
    protected void onCreate(Bundle savedInstanceState){
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_sleep_stats);

        //deserialize device object.
        deviceData = (DataDevice) getIntent().getSerializableExtra(DEVICE_DATA_KEY);
        deviceName = getIntent().getStringExtra(DEVICE_NAME_KEY);

        //stats toolbar setup.
        toolbar = findViewById(R.id.statsToolbar);
        setSupportActionBar(toolbar);
        getSupportActionBar().setDisplayShowTitleEnabled(false);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        toolbarTitle = findViewById(R.id.stats_toolbar_title);
        toolbarTitle.setText(deviceName);
        mDevicePerformer.addPerformerListener(mPerformerListener);

        mDevicePerformer.cmd_requestWristbandConfig();
        mDevicePerformer.syncData();
    }

    @Override
    public boolean onSupportNavigateUp(){
        finish();
        return true;
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu){
        getMenuInflater().inflate(R.menu.menu_main_activity, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item){
//        switch(item.getItemId()){
//            case R.id.settings:
//                startActivity(SettingsActivity.getInstanceIntent(getApplicationContext()));
//                return true;
//        }
        return super.onOptionsItemSelected(item);
    }

    public static Intent getInstanceIntent(Context context, DataDevice deviceData, String deviceName){
        Intent intent = new Intent(context, SleepStatsActivity.class);
        intent.putExtra(DEVICE_DATA_KEY, deviceData);
        intent.putExtra(DEVICE_NAME_KEY, deviceName);
        return intent;
    }

    private SimplePerformerListener mPerformerListener = new SimplePerformerListener() {

        @Override
        public void onSyncDataSleepTotalData(List<SleepTotalData> datas) {
            String dataToString="";
            Log.e(TAG, "------------------" );
            Log.e(TAG,"onSyncDataSleepTotalData" );
            Log.e(TAG, "------------------" );
            for(SleepTotalData data :datas){
                dataToString+="deep sleep "+String.valueOf(data.getDeepSleep());
                dataToString+=" light sleep"+String.valueOf(data.getLightSleep());
                Date d = new Date(data.getTimeStamp() );
                dataToString+=" date "+d.toString();


            }
            if(datas.size()<=0){
                dataToString="no data to show";

            }
            Log.e(TAG, "------------------" );
            Log.e(TAG, dataToString );
            Log.e(TAG, "------------------" );
        }

        @Override
        public void onSyncDataResult(List<SyncRawData> datas) {
            Log.e(TAG, "------------------" );
            Log.e(TAG, "onSyncDataResult" );
            Log.e(TAG, "------------------" );
        }

        @Override
        public void onSyncDataTodayTotalData(TodayTotalData data) {
            Log.e(TAG, "------------------" );
            Log.e(TAG, "steps "+ String.valueOf(data.getSteps()) );
            Log.e(TAG, "------------------" );

        }



    };

    @Override
    protected void onDestroy() {
        super.onDestroy();
        mDevicePerformer.removePerformerListener(mPerformerListener);
    }


}
