package com.neperiagroup.happysalus.Renderers;

import android.graphics.Bitmap;
import android.graphics.Canvas;

import com.github.mikephil.charting.animation.ChartAnimator;
import com.github.mikephil.charting.buffer.BarBuffer;
import com.github.mikephil.charting.data.BarData;
import com.github.mikephil.charting.data.BarEntry;
import com.github.mikephil.charting.highlight.Highlight;
import com.github.mikephil.charting.highlight.Range;
import com.github.mikephil.charting.interfaces.dataprovider.BarDataProvider;
import com.github.mikephil.charting.interfaces.datasets.IBarDataSet;
import com.github.mikephil.charting.renderer.BarChartRenderer;
import com.github.mikephil.charting.utils.Transformer;
import com.github.mikephil.charting.utils.ViewPortHandler;

import java.util.ArrayList;
import java.util.List;

public class HrRendered extends BarChartRenderer {

    private final Bitmap barImage[];

    public HrRendered(BarDataProvider chart, ChartAnimator animator, ViewPortHandler viewPortHandler, Bitmap barImage[]) {
        super(chart, animator, viewPortHandler);
        this.barImage = barImage;
    }

    @Override
    public void drawData(Canvas c) {
        super.drawData(c);
    }

    @Override
    protected void drawDataSet(Canvas c, IBarDataSet dataSet, int index) {
        super.drawDataSet(c, dataSet, index);
        drawBarImages(c, dataSet, index);
    }

    protected void drawBarImages(Canvas c, IBarDataSet dataSet, int index) {
        BarBuffer buffer = mBarBuffers[index];

        float left; //avoid allocation inside loop
        float right;
        float top;
        float bottom;

        List<Bitmap> bitmapList = new ArrayList<Bitmap>();
        for (int i = 0; i < barImage.length; i++) {
            bitmapList.add(scaleBarImage(buffer, i));
        }

        int starWidth = bitmapList.get(0).getWidth();
        int starOffset = starWidth / 2;

        int barNumber=0;
        for (int j = 0; j < buffer.buffer.length * mAnimator.getPhaseX(); j += 4) {
            left = buffer.buffer[j];
            right = buffer.buffer[j + 2];
            top = buffer.buffer[j + 1];
            bottom = buffer.buffer[j + 3];

            float x = (left + right) / 2f;

            if (!mViewPortHandler.isInBoundsRight(x))
                break;

            if (!mViewPortHandler.isInBoundsY(top)
                    || !mViewPortHandler.isInBoundsLeft(x))
                continue;

            if (barNumber==3) {
                barNumber=0;
                int indexColorImage=0;
                int topIndex = j+1;
                int bottomIndex = j+3;
                float topImage = top;
                if (top != bottom){
                    indexColorImage=3;
                } else if (buffer.buffer[topIndex-4] != buffer.buffer[bottomIndex-4]) {
                    indexColorImage=2;
                    topImage = buffer.buffer[topIndex-4];
                } else if (buffer.buffer[topIndex-8] != buffer.buffer[bottomIndex-8]) {
                    indexColorImage=1;
                    topImage = buffer.buffer[topIndex-8];
                } else {
                    topImage = buffer.buffer[topIndex-12];
                }
                Bitmap scaledBarImage=bitmapList.get(indexColorImage);
                drawImage(c, scaledBarImage, x - starOffset, topImage-20);
            }else {
                barNumber++;
            }
        }
    }

    private Bitmap scaleBarImage(BarBuffer buffer, int index) {
        float firstLeft = buffer.buffer[0];
        float firstRight = buffer.buffer[2];
        int firstWidth = (int) Math.ceil(firstRight - firstLeft);
        return Bitmap.createScaledBitmap(barImage[index], firstWidth+20, firstWidth+20, false);
    }

    protected void drawImage(Canvas c, Bitmap image, float x, float y) {
        if (image != null) {
            c.drawBitmap(image, x, y, null);
        }
    }

    @Override
    public void drawHighlighted(Canvas c, Highlight[] indices) {

        BarData barData = mChart.getBarData();
        for (Highlight high : indices) {

            IBarDataSet set = barData.getDataSetByIndex(high.getDataSetIndex());

            if (set == null || !set.isHighlightEnabled())
                continue;

            BarEntry e = set.getEntryForXValue(high.getX(), high.getY());

            if (!isInBoundsX(e, set))
                continue;

            Transformer trans = mChart.getTransformer(set.getAxisDependency());

            mHighlightPaint.setColor(set.getHighLightColor());
            mHighlightPaint.setAlpha(set.getHighLightAlpha());


            boolean isStack = (high.getStackIndex() >= 0  && e.isStacked()) ? true : false;

            final float y1;
            final float y2;

            if (isStack) {

                if(mChart.isHighlightFullBarEnabled()) {

                    y1 = e.getPositiveSum();
                    y2 = -e.getNegativeSum();

                } else {

                    Range range = e.getRanges()[high.getStackIndex()];

                    y1 = range.from;
                    y2 = range.to;
                }

            } else {
                y1 = e.getY();
                y2 = 0.f;
            }

            prepareBarHighlight(e.getX(), y1, y2, barData.getBarWidth() / 2f, trans);
            //mBarRect.offsetTo(mBarRect.left, mBarRect.top-25);
            setHighlightDrawPos(high, mBarRect);

            c.drawRoundRect(mBarRect, 25, 25, mHighlightPaint);

            /*BarBuffer buffer = mBarBuffers[(int) set.getXMin()];
            final Bitmap scaledBarImage = scaleBarImage(buffer);
            int starWidth = scaledBarImage.getWidth();
            int starOffset = starWidth / 2;
            int xStart = ((int)e.getX())*4;
            float left = buffer.buffer[xStart];
            float right = buffer.buffer[(xStart + 2)];
            float top = buffer.buffer[(xStart + 1)];
            float x = (left + right) / 2f;
            float val = y1;
            if (val > 50) {
                drawImage(c, scaledBarImage, x - starOffset, top);
            }*/
        }
    }

}
