package com.neperiagroup.happysalus;

import android.bluetooth.BluetoothDevice;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.preference.PreferenceManager;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.htsmart.wristband.WristbandApplication;
import com.htsmart.wristband.bean.WristbandConfig;
import com.htsmart.wristband.connector.ConnectorListener;
import com.htsmart.wristband.connector.IDeviceConnector;
import com.htsmart.wristband.performer.IDevicePerformer;
import com.htsmart.wristband.performer.SimplePerformerListener;
import com.neperiagroup.happysalus.bean.User;
import com.neperiagroup.happysalus.services.WritePeriodicalyService;
import com.neperiagroup.happysalus.utility.StoreInMemory;
import com.neperiagroup.happysalus.utility.TagUser;

import java.util.Arrays;

public class ConnectActivity extends AppCompatActivity {

    private static final String TAG = ConnectActivity.class.getName();
    private static final String KEY_DEVICE_FOUND = TAG + ".device_found";

    public static final String ACTION_CONNECT_DEVICE = BuildConfig.APPLICATION_ID + ".action.connect_device";

    private Toolbar toolbar;

    private BluetoothDevice mBluetoothDevice;
    private IDeviceConnector mDeviceConnector = WristbandApplication.getDeviceConnector();

    private TextView mLabelNameDevice;
    private TextView mStateDevice;
    private Button mConnectBtn;

    private WristbandConfig mWristbandConfig;

    private TagUser tagUser;
    private StoreInMemory storeInMemory;
    private User mUser = MyApplication.getInstance().getUser();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_device);

        //signup toolbar setup.
        toolbar = findViewById(R.id.signupToolbar);
        setSupportActionBar(toolbar);
        getSupportActionBar().setDisplayShowTitleEnabled(false);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);

        tagUser = new TagUser();
        storeInMemory = new StoreInMemory(getApplicationContext());

        mBluetoothDevice = getIntent().getParcelableExtra(KEY_DEVICE_FOUND);

        mDeviceConnector.addConnectorListener(mConnectorListener);

        mLabelNameDevice = findViewById(R.id.labelNameDevice);
        mStateDevice = findViewById(R.id.textVieConnectionInProgress);

        mConnectBtn = (Button) findViewById(R.id.buttonConnectDevice);

        mConnectBtn.setVisibility(View.INVISIBLE);

        mConnectBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                if (mDeviceConnector.isConnect()) {
                    mDeviceConnector.close();
                } else {
                    connect();
                }

            }
        });

        connect();

        registerReceiver(mBroadcastReceiver, new IntentFilter(ACTION_CONNECT_DEVICE));
    }

    public static Intent getIstanceIntent(Context context, BluetoothDevice device){
        Intent intent = new Intent(context, ConnectActivity.class);
        intent.putExtra(KEY_DEVICE_FOUND, device);
        return intent;
    }

    @Override
    public boolean onSupportNavigateUp(){
        finish();
        return true;
    }

    private BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            if (ACTION_CONNECT_DEVICE.equals(intent.getAction())) {
                connect();
            }
        }
    };


    private boolean isUserBound() {
        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
        return sharedPreferences.getBoolean(tagUser.getKEY_USER_BIND() + mUser.getId(), false);
    }

    private void setUserBound(boolean bound) {
        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
        sharedPreferences.edit().putBoolean(tagUser.getKEY_USER_BIND() + mUser.getId(), bound).apply();
        storeInMemory.setNameBtcDeviceUserBindToStore(tagUser.getKEY_USER_ID(), mBluetoothDevice.getName());
    }


    private void connect() {
        if (isUserBound()) {
            Log.i("-------connessione","Login");
            mDeviceConnector.connectWithLogin(mBluetoothDevice, MyApplication.getInstance().getUser());
        } else {
            Log.i("-------connessione","Bind");
            mDeviceConnector.connectWithBind(mBluetoothDevice, MyApplication.getInstance().getUser());
        }
        mStateDevice.setText(R.string.connecting);
        updateConnectBtn(true, false);
    }

    private ConnectorListener mConnectorListener = new ConnectorListener() {
        @Override
        public void onConnect(WristbandConfig config) {
            mStateDevice.setText(R.string.connect);
            mLabelNameDevice.setText(mBluetoothDevice.getName());
            updateConnectBtn(false, true);
            mWristbandConfig = config;
            Log.e(TAG, "WristbandConfig:" + Arrays.toString(config.getBytes()));

            MyApplication.getInstance().setNotificationConfig(config.getNotificationConfig());
            setUserBound(true);
            startActivity(DashboardActivity.getInstanceIntent(getApplicationContext()));
            Toast.makeText(getApplicationContext(), R.string.connect, Toast.LENGTH_SHORT).show();
            //TODO abilite this for background monitoring
            //startService(new Intent(getApplicationContext(),WritePeriodicalyService.class));
        }

        @Override
        public void onDisconnect(final boolean b, final boolean b1) {
            mStateDevice.setText(R.string.disconnect);
            mConnectBtn.setVisibility(View.VISIBLE);
            updateConnectBtn(true, true);
            //TODO abilite this for background monitoring
            //stopService(new Intent(getApplicationContext(),WritePeriodicalyService.class));
        }

        @Override
        public void onConnectFailed(final int i) {
            mStateDevice.setText(R.string.connect_failed);
            mConnectBtn.setVisibility(View.VISIBLE);
            updateConnectBtn(true, true);
        }
    };

    private void updateConnectBtn(boolean connect, boolean enable) {
        mConnectBtn.setText(connect ? R.string.connect : R.string.disconnect);
        mConnectBtn.setEnabled(enable);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        mDeviceConnector.removeConnectorListener(mConnectorListener);
        mDeviceConnector.close();

        unregisterReceiver(mBroadcastReceiver);
    }
}
