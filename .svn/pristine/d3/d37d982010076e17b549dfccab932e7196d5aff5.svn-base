package com.neperiagroup.happysalus;

import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.ListView;
import android.widget.TextView;

import com.github.mikephil.charting.charts.BarChart;
import com.github.mikephil.charting.components.AxisBase;
import com.github.mikephil.charting.components.Legend;
import com.github.mikephil.charting.components.XAxis;
import com.github.mikephil.charting.components.YAxis;
import com.github.mikephil.charting.data.BarData;
import com.github.mikephil.charting.data.BarDataSet;
import com.github.mikephil.charting.data.BarEntry;
import com.github.mikephil.charting.data.Entry;
import com.github.mikephil.charting.formatter.IAxisValueFormatter;
import com.github.mikephil.charting.highlight.Highlight;
import com.github.mikephil.charting.interfaces.datasets.IBarDataSet;
import com.github.mikephil.charting.listener.OnChartValueSelectedListener;
import com.neperiagroup.happysalus.Renderers.HorizontalBarChartRenderer;
import com.neperiagroup.happysalus.Renderers.HorizontalBarChartRendererVerticalLines;
import com.neperiagroup.happysalus.Renderers.VericalBarChartRenderer;
import com.neperiagroup.happysalus.adapters.WeekDataAdapter;
import com.neperiagroup.happysalus.bean.DataDevice;
import com.neperiagroup.happysalus.bean.GenericDayData;
import com.neperiagroup.happysalus.bean.OxygenDayData;
import com.neperiagroup.happysalus.bean.StepDayData;
import com.neperiagroup.happysalus.bean.WeekData;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

public class StepsStatsActivity extends AppCompatActivity{
    private static final String TAG = StepsStatsActivity.class.getName();
    private static final String DEVICE_DATA_KEY = TAG + ".device_data";
    private static final String DEVICE_NAME_KEY = TAG + ".device_name";

    private Toolbar toolbar;
    private TextView toolbarTitle;

    private String deviceName;
    private DataDevice deviceData;

    private ListView weeksDataList;

    private String[] colors = new String[] {"#FFFFFF"};
    private List<BarEntry> entriesStepToday;

    private BarChart barChart;
    private BarChart stepTodayChart;

    @Override
    protected void onCreate(Bundle savedInstanceState){
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_steps_stats);

        //deserialize device object.
        deviceData = (DataDevice) getIntent().getSerializableExtra(DEVICE_DATA_KEY);
        deviceName = getIntent().getStringExtra(DEVICE_NAME_KEY);

        //stats toolbar setup.
        toolbar = findViewById(R.id.statsToolbar);
        setSupportActionBar(toolbar);
        getSupportActionBar().setDisplayShowTitleEnabled(false);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        toolbarTitle = findViewById(R.id.stats_toolbar_title);
        toolbarTitle.setText(deviceName);
        weeksDataList=findViewById(R.id.listWeekData);

        barChart=findViewById(R.id.BarChart);
        gethorizontalBarChart(3200, 7000);

        stepTodayChart=findViewById(R.id.stepChartToday);
        drawStepToday();


        WeekDataAdapter weekDataAdapter=new WeekDataAdapter(getApplicationContext(),getWeeks());
        weeksDataList.setAdapter(weekDataAdapter);


    }

    @Override
    public boolean onSupportNavigateUp(){
        finish();
        return true;
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu){
        getMenuInflater().inflate(R.menu.menu_main_activity, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item){
//        switch(item.getItemId()){
//            case R.id.settings:
//                startActivity(SettingsActivity.getInstanceIntent(getApplicationContext()));
//                return true;
//        }
        return super.onOptionsItemSelected(item);
    }

    public static Intent getInstanceIntent(Context context, DataDevice deviceData, String deviceName){
        Intent intent = new Intent(context, StepsStatsActivity.class);
        intent.putExtra(DEVICE_DATA_KEY, deviceData);
        intent.putExtra(DEVICE_NAME_KEY, deviceName);
        return intent;
    }

    private List<WeekData> getWeeks() {
        //TODO get from storage
        List<WeekData> weeks = new ArrayList<WeekData>();
        WeekData current = new WeekData("Questa Settimana", "600 Media");
        List<GenericDayData> days1 = new ArrayList<GenericDayData>();
        StepDayData day1 = new StepDayData();
        Date date1 = new Date();
        day1.setDate(date1);
        day1.setData("500");
        StepDayData day2 = new StepDayData();
        day2.setDate(date1);
        day2.setData("700");
        days1.add(day1);
        days1.add(day2);
        current.setDays(days1);
        WeekData pre = new WeekData("24 SET - 30 SET", "96 Media");

        weeks.add(current);
        weeks.add(pre);

        return weeks;
    }

    private Bitmap getBitmap(int drawableRes) {
        Drawable drawable = getResources().getDrawable(drawableRes);
        Canvas canvas = new Canvas();
        Bitmap bitmap = Bitmap.createBitmap(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight(), Bitmap.Config.ARGB_8888);
        canvas.setBitmap(bitmap);
        drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());
        drawable.draw(canvas);
        return bitmap;
    }
    public void gethorizontalBarChart(int val,int bound)
    {
        ArrayList<BarEntry> yVals =  new ArrayList<>();
        yVals.add(new BarEntry(1f,val)); //index,value)

        BarDataSet set1= new BarDataSet(yVals, "");
        set1.setHighLightColor(Color.WHITE);
        set1.setColor(Color.WHITE);
        set1.setDrawValues(false);
        BarData data = new BarData(set1);
        data.setBarWidth(1f);

        YAxis yl = barChart.getAxisLeft();
        yl.setAxisMinimum(0f);
        yl.setAxisMaximum(bound);
        yl.setTextColor(Color.TRANSPARENT);
        yl.setEnabled(false);

        YAxis yr = barChart.getAxisRight();
        yr.setAxisMinimum(0f);
        yr.setAxisMaximum(bound);
        yr.setEnabled(false);
        // int[] rootLocation = new int[2];
        barChart.setData(data);
        barChart.setScaleEnabled(false);
        //chart.getLocationOnScreen(rootLocation);
        barChart.getDescription().setEnabled(false);
        barChart.setDrawGridBackground(false);
        barChart.getXAxis().setDrawGridLines(false);
        barChart.getAxisLeft().setDrawGridLines(false);
        barChart.getAxisRight().setDrawGridLines(false);
        barChart.getXAxis().setEnabled(false);
        barChart.getXAxis().setCenterAxisLabels(true);
        barChart.getXAxis().setAxisMinimum(0);
        barChart.getXAxis().setAxisMinimum(1);
        barChart.setDrawBarShadow(true);
        barChart.getLegend().setEnabled(false);
        barChart.animateY(1000);
        barChart.invalidate();

        //Bitmap pointBitmap  = BitmapFactory.decodeResource(getResources(), drawable.circle_shape);

        Bitmap bit0= getBitmap(R.drawable.bar_shape);
        Bitmap bit10=getBitmap(R.drawable.bar_shape);
        Bitmap bit20= getBitmap(R.drawable.bar_shape);
        Bitmap bit30=getBitmap(R.drawable.bar_shape);
        Bitmap bit40= getBitmap(R.drawable.bar_shape);
        Bitmap bit50=getBitmap(R.drawable.circle_shape);
        Bitmap [] points ={bit0,bit10,bit20,bit30,bit40,bit50};

        XAxis xAxis=barChart.getXAxis();
        xAxis.setAxisMinimum(0);
        YAxis yAxis=barChart.getAxisLeft();
        yAxis.setAxisMinimum(0);
        HorizontalBarChartRendererVerticalLines barChartCustomRenderer = new HorizontalBarChartRendererVerticalLines(barChart,barChart.getAnimator(),barChart.getViewPortHandler(),points);
        barChart.setRenderer(barChartCustomRenderer);


        barChart.invalidate();
    }

    private int[] getColors() {
        int[] values = new int[colors.length];

        for (int i = 0; i < colors.length; i++) {
            values[i] = Color.parseColor(colors[i]);
        }

        return values;
    }

    private void drawStepToday(){
        // TODO mapping in x axis from number to string;
        final HashMap<Integer, String> numMap = new HashMap<>();
        // TODO parameter x axis & y
        Random rand = new Random();
        int axisX = 24;

        entriesStepToday = new ArrayList<>();

        for (int i=1; i<=axisX; i++) {
            float randomNumber = rand.nextFloat() * (130 - 50) +50;

            if (i==1) {
                numMap.put(i, "00:00"); // la mappatura avviene qui;
            }
            if (i>1 && i<24) {
                numMap.put(i, ""); // la mappatura avviene qui;
            }
            if (i==24){
                numMap.put(i, "24:00"); // la mappatura avviene qui;
            }

            entriesStepToday.add(new BarEntry(i, randomNumber)); // setta qui i valori reali;

        }


        final BarDataSet set1;

        if (stepTodayChart.getData() != null && stepTodayChart.getData().getDataSetCount() > 0)
        {
            set1 = (BarDataSet) stepTodayChart.getData().getDataSetByIndex(0);
            set1.setValues(entriesStepToday);
            //set1.setHighLightAlpha(0); // To remove background color use setHighLightAlpha(0);

            set1.setHighlightEnabled(true);

            set1.setDrawValues(false);
            stepTodayChart.getData().notifyDataChanged();
            stepTodayChart.notifyDataSetChanged();
        }
        else
        {
            set1 = new BarDataSet(entriesStepToday, "");
            //set1.setHighLightAlpha(0); // To remove background color use setHighLightAlpha(0);

            set1.setDrawIcons(false);
            set1.setDrawValues(false);
            set1.setColors(getColors());
            ArrayList<IBarDataSet> dataSets = new ArrayList<>();

            dataSets.add(set1);

            BarData data = new BarData(dataSets);
            data.setBarWidth(0.3f);

            stepTodayChart.setData(data);
        }



        // TODO disable zoom
        stepTodayChart.setScaleEnabled(false);

        // TODO disable description label
        stepTodayChart.getDescription().setEnabled(false);

        // TODO this animationX
        stepTodayChart.animateX(1000);

        // TODO Settings generics
        stepTodayChart.setFitBars(true);

        stepTodayChart.getAxisLeft().setDrawGridLines(false); // disattiva la griglia di sinistra.
        stepTodayChart.getXAxis().setDrawGridLines(false);
        stepTodayChart.getAxisRight().setDrawGridLines(false); // disattiva la griglia di destra.
        stepTodayChart.setDrawValueAboveBar(false); //imposta i valori sotto la punta max di ogni barra
        stepTodayChart.setDrawBarShadow(false); // setta l'ombra su tutta la barra..
        stepTodayChart.getXAxis().setPosition(XAxis.XAxisPosition.BOTTOM);

        // TODO color parameter on the left
        stepTodayChart.getAxisLeft().setTextColor(Color.WHITE);
        stepTodayChart.getAxisRight().setDrawAxisLine(false);
        stepTodayChart.getAxisLeft().setDrawGridLines(false); // grid line left
        stepTodayChart.getAxisLeft().setAxisLineColor(Color.WHITE); // colore linea Y
        stepTodayChart.getAxisRight().setEnabled(false);
        stepTodayChart.getXAxis().setAxisLineColor(Color.WHITE);

        // TODO remove axis Y
        YAxis leftAxis = stepTodayChart.getAxisLeft(); // remove axis
        leftAxis.setAxisMinimum(0);
        leftAxis.setEnabled(false);


        //Todo this Mapping axis x
        final XAxis xAxis = stepTodayChart.getXAxis();
        xAxis.setTextColor(Color.WHITE);
        xAxis.setLabelCount(24);
        xAxis.setValueFormatter(new IAxisValueFormatter() {
            @Override
            public String getFormattedValue(float value, AxisBase axis) {
                return numMap.get((int)value);
            }
        });

        Legend legend = stepTodayChart.getLegend();
        legend.setEnabled(false); // hide legend

        VericalBarChartRenderer customRenderer = new VericalBarChartRenderer(stepTodayChart, stepTodayChart.getAnimator(), stepTodayChart.getViewPortHandler());
        stepTodayChart.setRenderer(customRenderer);


        stepTodayChart.setOnChartValueSelectedListener(new OnChartValueSelectedListener() {
            @Override
            public void onValueSelected(final Entry entry, Highlight highlight) {

                final float x=entry.getX();
                final float y=entry.getY();
                System.out.println("x: "+x);
                System.out.println("y: "+y);

                Highlight h1 = new Highlight(x,0,0);
                //set1.setHighLightColor(Color.YELLOW); // change color selection barchar -> change Color.TRASPARENT
                //set1.setHighLightAlpha(0);



                stepTodayChart.highlightValues(new Highlight[]{h1});
                highlight.getDataIndex();

            }

            @Override
            public void onNothingSelected() {

            }
        });



        stepTodayChart.invalidate();


    }

}
