package com.neperiagroup.happysalus;

import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.os.Build;
import android.os.Bundle;
import android.support.annotation.RequiresApi;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.github.mikephil.charting.charts.PieChart;
import com.github.mikephil.charting.data.PieData;
import com.github.mikephil.charting.data.PieDataSet;
import com.github.mikephil.charting.data.PieEntry;
import com.htsmart.wristband.WristbandApplication;
import com.htsmart.wristband.bean.WristbandConfig;
import com.htsmart.wristband.bean.WristbandVersion;
import com.htsmart.wristband.performer.IDevicePerformer;

import com.htsmart.wristband.performer.SimplePerformerListener;
import com.neperiagroup.happysalus.adapters.WeekDataAdapter;
import com.neperiagroup.happysalus.bean.DataDevice;
import com.neperiagroup.happysalus.bean.GenericDayData;
import com.neperiagroup.happysalus.bean.HrDayData;
import com.neperiagroup.happysalus.bean.OxygenDayData;
import com.neperiagroup.happysalus.bean.WeekData;
import com.neperiagroup.happysalus.services.FileMamoryService;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class OxygenStatsActivity extends AppCompatActivity{
    private static final String TAG = OxygenStatsActivity.class.getName();
    private static final String DEVICE_DATA_KEY = TAG + ".device_data";
    private static final String DEVICE_NAME_KEY = TAG + ".device_name";

    List<PieEntry> entries = new ArrayList<>();
    ArrayList<Integer> colors = new ArrayList<Integer>();
    PieChart chart;

    private Toolbar toolbar;
    private TextView toolbarTitle;

    private String deviceName;
    private DataDevice deviceData;

    private TextView mOxyValue;


    private IDevicePerformer mDevicePerformer = WristbandApplication.getDevicePerformer();

    float lastValue;
    Button readButton;



    private ListView weeksDataList;


    @RequiresApi(api = Build.VERSION_CODES.N)
    @Override
    protected void onCreate(Bundle savedInstanceState){
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_oxygen_stats);

        //deserialize device object.
        deviceData = (DataDevice) getIntent().getSerializableExtra(DEVICE_DATA_KEY);
        deviceName = getIntent().getStringExtra(DEVICE_NAME_KEY);

        //stats toolbar setup.
        toolbar = findViewById(R.id.statsToolbar);
        setSupportActionBar(toolbar);
        getSupportActionBar().setDisplayShowTitleEnabled(false);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        toolbarTitle = findViewById(R.id.stats_toolbar_title);
        toolbarTitle.setText(deviceName);
        //mOxyValue=findViewById(R.id.oxValue);

        mDevicePerformer.addPerformerListener(mPerformerListener);
        mDevicePerformer.cmd_requestWristbandConfig();
        mDevicePerformer.openHealthyRealTimeData(IDevicePerformer.HEALTHY_TYPE_OXYGEN);

        readButton=(Button) findViewById(R.id.read_button);
        readButton.setOnClickListener( new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                Intent intentMain = new Intent(OxygenStatsActivity.this ,
                        OxygenRead.class);
                OxygenStatsActivity.this.startActivity(intentMain);

            }
        });
        chart = findViewById(R.id.weightChart);
        //TODO read value
        lastValue=95;
        paintPieChart(lastValue);

        weeksDataList=findViewById(R.id.listWeekData);

        WeekDataAdapter weekDataAdapter=new WeekDataAdapter(getApplicationContext(),getWeeks());
        weeksDataList.setAdapter(weekDataAdapter);
    }

    @Override
    public boolean onSupportNavigateUp(){
        finish();
        return true;
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu){
        getMenuInflater().inflate(R.menu.menu_main_activity, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item){
//        switch(item.getItemId()){
//            case R.id.settings:
//                startActivity(SettingsActivity.getInstanceIntent(getApplicationContext()));
//                return true;
//        }
        return super.onOptionsItemSelected(item);
    }

    public static Intent getInstanceIntent(Context context, DataDevice deviceData, String deviceName){
        Intent intent = new Intent(context, OxygenStatsActivity.class);
        intent.putExtra(DEVICE_DATA_KEY, deviceData);
        intent.putExtra(DEVICE_NAME_KEY, deviceName);
        return intent;
    }

    private SimplePerformerListener mPerformerListener = new SimplePerformerListener() {
        @Override
        public void onResponseWristbandConfig(WristbandConfig config) {
            WristbandVersion version = config.getWristbandVersion();
            if (version.isOxygenEnable()) {
                //mOxyValue.setVisibility(View.VISIBLE);
                //mOxyValue.setText(getString(R.string.oxygen_value, 0));
            }

        }

        @Override
        public void onOpenHealthyRealTimeData(int healthyType, boolean success) {
            if (success) {
                switch (healthyType) {
                    case IDevicePerformer.HEALTHY_TYPE_HEART_RATE:

                        break;
                }
            }
        }

        @Override
        public void onCloseHealthyRealTimeData(int healthyType) {
            switch (healthyType) {
                case IDevicePerformer.HEALTHY_TYPE_HEART_RATE:

                    break;

                case IDevicePerformer.HEALTHY_TYPE_OXYGEN:

                    break;

                case IDevicePerformer.HEALTHY_TYPE_BLOOD_PRESSURE:

                    break;

                case IDevicePerformer.HEALTHY_TYPE_RESPIRATORY_RATE:

                    break;
            }
        }

        @Override
        public void onResultHealthyRealTimeData(int heartRate, int oxygen, int diastolicPressure, int systolicPressure, int respiratoryRate) {
            if (oxygen != 0 ) {
                //mOxyValue.setText(String.valueOf(oxygen)+ "%");
                chart.setCenterText(String.valueOf(oxygen)+"\n%");
                changeVAlues(oxygen);


            }

        }

    };
    @Override
    protected void onDestroy() {
        super.onDestroy();
        mDevicePerformer.removePerformerListener(mPerformerListener);
        mDevicePerformer.closeHealthyRealTimeData(IDevicePerformer.HEALTHY_TYPE_OXYGEN);
    }



    public void paintPieChart(float val )
    {

        int[] colors = new int[] {Color.argb(255,255,255,255), Color.TRANSPARENT};
        entries.add(new PieEntry(val));

        //Log.d("percentuale ","val "+val);
        float other = 100-val;
        //Log.d("percentuale ","other "+other);
        entries.add(new PieEntry(other));

        PieDataSet set = new PieDataSet(entries,null);
        PieData data = new PieData(set);
        set.setColors(colors);
        data.setValueTextColor(Color.TRANSPARENT);
        //set.setXValuePosition(PieDataSet.ValuePosition.OUTSIDE_SLICE);
        //set.setYValuePosition(PieDataSet.ValuePosition.OUTSIDE_SLICE);

        //PieChartRenderer chartR = new PieChartRenderer(chart,chart.getAnimator(),chart.getViewPortHandler());
        //chart.setRenderer(chartR);
        //chart.invalidate();
        //temp

        int value=(int)data.getDataSet().getEntryForIndex(0).getValue();
        //Log.d("percentuale ","value "+value);

        chart.setTransparentCircleRadius(94);
        chart.setTransparentCircleColor(getResources().getColor(R.color.light));
        chart.getDescription().setEnabled(false);
        chart.setRotationEnabled(false);
        chart.setCenterText(value+"\n%");
        chart.setCenterTextSize(20);
        chart.setCenterTextColor(Color.WHITE);
        chart.getLegend().setEnabled(false);
        chart.getDescription().setEnabled(false);
        chart.setEntryLabelColor(Color.TRANSPARENT);
        chart.setDrawEntryLabels(false);
        chart.setDrawHoleEnabled(true);
        chart.setHoleRadius(90.0f);
        chart.setHoleColor(Color.TRANSPARENT);
        chart.setData(data);
        //chart.spin( 500,0,360 - angleTo, Easing.EasingOption.EaseInOutQuad ); // rotazione del grafico
        chart.animateY(1000);
        chart.notifyDataSetChanged(); // let the chart know it's data changed

        //PieChartRenderer custom= new PieChartRenderer(chart, chart.getAnimator(),chart.getViewPortHandler());
        //chart.setRenderer(custom);
        chart.invalidate(); // refresh

    }

    private void changeVAlues(float val){
        entries.get(0).setY(val);
        entries.get(1).setY(100-val);
        chart.notifyDataSetChanged();
        chart.invalidate(); // refresh
    }

    @RequiresApi(api = Build.VERSION_CODES.N)
    private List<WeekData> getWeeks(){
        //TODO get from storage

        /*
        List<WeekData> weeks=new ArrayList<WeekData>();
        WeekData current=new WeekData("Questa Settimana","96% Media");
        List<GenericDayData> days1=new ArrayList<GenericDayData>();
        OxygenDayData day1=new OxygenDayData();
        //day1.setDay("Sab");
        Date date1=new Date();
        day1.setDate(date1);
        day1.setData("97");
        OxygenDayData day2=new OxygenDayData();
        day2.setDate(date1);
        //day2.setDay("Dom");
        day2.setData("95");
        days1.add(day1);
        days1.add(day2);
        current.setDays(days1);
        WeekData pre=new WeekData("24 SET - 30 SET","96 Media");

        weeks.add(current);
        weeks.add(pre);
        */
        List<WeekData> weeks=new ArrayList<WeekData>();
        FileMamoryService fileMamoryService=new FileMamoryService(getApplicationContext());
        try {
            weeks=fileMamoryService.getAllWeekOxygenData();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return weeks;


    }


}
