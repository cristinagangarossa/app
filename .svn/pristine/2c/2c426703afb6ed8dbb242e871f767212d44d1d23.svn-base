package com.neperiagroup.happysalus.services;

import com.neperiagroup.happysalus.R;
import com.neperiagroup.happysalus.bean.DataDevice;
import com.neperiagroup.happysalus.bean.Device;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class DeviceService {

    private List<Device> devices;

    public DeviceService(){
        initSampleDevices();
    }

    public List<Device> getDevices() {
        return devices;
    }

    public void setDevices(List<Device> devices) {
        this.devices = devices;
    }

    private void initSampleDevices(){

        int imageDevice[] = {
                R.drawable.ip68,
                R.drawable.balance,
                R.drawable.sfig
        };

        String nameDevice[] = {
                "Fitness Tracker IP68",
                "Bilancia",
                "Sfigmomanometro"
        };

        String nameBtnDevice[] = {
                "HC92-8DE",
                "",
                ""
        };

        String dataType[] = {
                "heart",
                "oxygen",
                "pressure"
        };

        int imageDataDevice[] = {
                R.drawable.ic_heart_light,
                R.drawable.ic_steps_light,
                R.drawable.ic_sleep_light,
                R.drawable.ic_balance_light,
                R.drawable.ic_fire_light,
                R.drawable.ic_timer_light,
                R.drawable.ic_air_light,
                R.drawable.ic_oxygen_light,
                R.drawable.ic_sfig_light
        };

        devices = new ArrayList<Device>();
        List<DataDevice> dataDevices = null;
        Random rand = new Random();
        /*
        for(int x=0; x<3; x++){//Crea i device
            dataDevices = new ArrayList<DataDevice>();
            Random randDataType = new Random();
            for(int i=0; i<rand.nextInt(6)+1; i++){//Crea i dati dei dispositivi random
                DataDevice dataDevice = new DataDevice(imageDataDevice[i], "127 bpm", "Ultimo monitoraggio: 15:32", "AttivitÃ : intensa", dataType[randDataType.nextInt(3)]);
                dataDevices.add(dataDevice);
            }
            Device device = new Device(imageDevice[x], nameDevice[x],57, nameBtnDevice[x], dataDevices);
            devices.add(device);
        }
        */

        devices.add(getTracker());
        devices.add(getBalance());
        devices.add(getSfigmomanometro());
    }//Fine initSampleDevice



    private Device getTracker(){
        //TODO add control if there are data about previous misuration
        //TODO get battery level
        int batteryLevel=57;
        List<DataDevice> dataDevices =getDatadevices(1);
        Device device=new  Device(R.drawable.ip68,"Fitness Tracker IP68",batteryLevel,"HC92-8DE",dataDevices);
        return device;
    }

    private Device getBalance(){
        //TODO add control if there are data about previous misuration
        //TODO get battery level
        int batteryLevel=57;
        List<DataDevice> dataDevices =getDatadevices(2);
        Device device=new  Device(R.drawable.balance,"Balance",batteryLevel,"",dataDevices);
        return device;
    }
    private Device getSfigmomanometro(){
        //TODO add control if there are data about previous misuration
        //TODO get battery level
        int batteryLevel=57;
        List<DataDevice> dataDevices =getDatadevices(3);
        Device device=new  Device(R.drawable.sfig,"Sfigmomanometro",batteryLevel,"",dataDevices);
        return device;
    }

    private List<DataDevice> getDatadevices(int type){
        List<DataDevice> devices=new ArrayList<DataDevice>();
        if(type==1){//case traker
            //TODO get previous data
            String info="127 bpm";
            String subInfo="Ultimo monitoraggio: 15:32";
            String state="Attivita intensa";
            String dataType="heart";
            DataDevice heart=new DataDevice(R.drawable.ic_heart_light,info,subInfo,state,dataType);
            devices.add(heart);

            info="98%";
            subInfo="Ultimo monitoraggio 12.00";
            state="ottima ossigenazione";
            dataType="oxygen";
            DataDevice ox=new DataDevice(R.drawable.ic_oxygen_light,info,subInfo,state,dataType);
            devices.add(ox);

            info="200 steps";
            subInfo="Ultimo monitoraggio 15:32";
            state="Attivita intensa";
            dataType="steps";
            DataDevice steps=new DataDevice(R.drawable.ic_steps_light,info,subInfo,state,dataType);
            devices.add(steps);

            info="6 ore e 53 min";
            subInfo="Ultimo monitoraggio 8:00";
            state="dovresti dormire di piu";
            dataType="sleep";
            DataDevice sleep=new DataDevice(R.drawable.ic_sleep_light,info,subInfo,state,dataType);
            devices.add(sleep);

            info="80 min 120 max";
            subInfo="Ultimo monitoraggio 15:32";
            state="Pressione nella norma";
            dataType="pressure";
            DataDevice pressure=new DataDevice(R.drawable.ic_sfig_light,info,subInfo,state,dataType);
            devices.add(pressure);

            info="15 ";
            subInfo="Ultimo monitoraggio 15:32";
            state="Frequenza nella norma";
            dataType="breathFrequency";
            DataDevice oxygen=new DataDevice(R.drawable.ic_air_light,info,subInfo,state,dataType);
            devices.add(oxygen);



        }else if(type==2){//case libra
            String info="130 kg";
            String subInfo="Ultimo monitoraggio: oggi";
            String state="Peso esessivo";
            String dataType="balance";
            DataDevice libra=new DataDevice(R.drawable.ic_balance_light,info,subInfo,state,dataType);
            devices.add(libra);

        }else if(type==3){
            String info="80 min 120 max";
            String subInfo="Ultimo monitoraggio 15:32";
            String state="Pressione nella norma";
            String dataType="pressure";
            DataDevice pressure=new DataDevice(R.drawable.ic_sfig_light,info,subInfo,state,dataType);
            devices.add(pressure);
        }

        return devices;
    }
}
